// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: eventstream.proto

package proto

import (
	v1 "cloudevents.io/genproto/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventStreamV1_PublishEvent_FullMethodName      = "/eventstream.v1.EventStreamV1/PublishEvent"
	EventStreamV1_SubscribeToEvents_FullMethodName = "/eventstream.v1.EventStreamV1/SubscribeToEvents"
	EventStreamV1_Unsubscribe_FullMethodName       = "/eventstream.v1.EventStreamV1/Unsubscribe"
)

// EventStreamV1Client is the client API for EventStreamV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamV1Client interface {
	PublishEvent(ctx context.Context, in *v1.CloudEvent, opts ...grpc.CallOption) (*PublishEventResponse, error)
	SubscribeToEvents(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.CloudEvent], error)
	// unsubscribe from events (for dynamic subscribers)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eventStreamV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamV1Client(cc grpc.ClientConnInterface) EventStreamV1Client {
	return &eventStreamV1Client{cc}
}

func (c *eventStreamV1Client) PublishEvent(ctx context.Context, in *v1.CloudEvent, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, EventStreamV1_PublishEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStreamV1Client) SubscribeToEvents(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.CloudEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventStreamV1_ServiceDesc.Streams[0], EventStreamV1_SubscribeToEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequest, v1.CloudEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStreamV1_SubscribeToEventsClient = grpc.ServerStreamingClient[v1.CloudEvent]

func (c *eventStreamV1Client) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventStreamV1_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStreamV1Server is the server API for EventStreamV1 service.
// All implementations must embed UnimplementedEventStreamV1Server
// for forward compatibility.
type EventStreamV1Server interface {
	PublishEvent(context.Context, *v1.CloudEvent) (*PublishEventResponse, error)
	SubscribeToEvents(*SubscriptionRequest, grpc.ServerStreamingServer[v1.CloudEvent]) error
	// unsubscribe from events (for dynamic subscribers)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEventStreamV1Server()
}

// UnimplementedEventStreamV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventStreamV1Server struct{}

func (UnimplementedEventStreamV1Server) PublishEvent(context.Context, *v1.CloudEvent) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedEventStreamV1Server) SubscribeToEvents(*SubscriptionRequest, grpc.ServerStreamingServer[v1.CloudEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedEventStreamV1Server) Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedEventStreamV1Server) mustEmbedUnimplementedEventStreamV1Server() {}
func (UnimplementedEventStreamV1Server) testEmbeddedByValue()                       {}

// UnsafeEventStreamV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamV1Server will
// result in compilation errors.
type UnsafeEventStreamV1Server interface {
	mustEmbedUnimplementedEventStreamV1Server()
}

func RegisterEventStreamV1Server(s grpc.ServiceRegistrar, srv EventStreamV1Server) {
	// If the following call pancis, it indicates UnimplementedEventStreamV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventStreamV1_ServiceDesc, srv)
}

func _EventStreamV1_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CloudEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamV1Server).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStreamV1_PublishEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamV1Server).PublishEvent(ctx, req.(*v1.CloudEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStreamV1_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamV1Server).SubscribeToEvents(m, &grpc.GenericServerStream[SubscriptionRequest, v1.CloudEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStreamV1_SubscribeToEventsServer = grpc.ServerStreamingServer[v1.CloudEvent]

func _EventStreamV1_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamV1Server).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStreamV1_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamV1Server).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStreamV1_ServiceDesc is the grpc.ServiceDesc for EventStreamV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStreamV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventstream.v1.EventStreamV1",
	HandlerType: (*EventStreamV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishEvent",
			Handler:    _EventStreamV1_PublishEvent_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _EventStreamV1_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _EventStreamV1_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventstream.proto",
}
